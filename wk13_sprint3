#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <unistd.h> 

int main() {
    srand(time(0));
    const int simulationTime = 120; 
    const int capacity1 = 50;
    const int capacity2 = 100; 
    const int NI = 10;
    const int NO = 15; 

    std::vector<int> queue1;
    std::vector<int> queue2;
    int lostPackets1 = 0;
    int lostPackets2 = 0;

    for (int t = 0; t < simulationTime; ++t) {
        int ni = rand() % NI;
        int no = rand() % NO;

        if (capacity1 < queue1.size() + ni) {
            lostPackets1 += queue1.size() + ni - capacity1; // Overflow
            ni = capacity1 - queue1.size();
        }
        for (int i = 0; i < ni; i++) {
            queue1.push_back(rand() % 20); 
        }

        for (int i = 0; i < no; i++) {
            if (!queue1.empty()) {
                queue1.erase(queue1.begin());
            }
        }
        if (capacity2 < queue2.size() + ni) {
            lostPackets2 += queue2.size() + ni - capacity2; // Overflow
            ni = capacity2 - queue2.size();
        }
        for (int i = 0; i < ni; i++) {
            queue2.push_back(rand() % 20); // Enqueue random packet
        }

        for (int i = 0; i < no; i++) {
            if (!queue2.empty()) {
                queue2.erase(queue2.begin());
            }
        }

        std::cout << "Time " << t << ": Queue1 size = " << queue1.size() << ", Queue2 size = " << queue2.size() << std::endl;
        sleep(1); 
    }

    std::cout << "Total lost packets due to overflow in Queue1: " << lostPackets1 << std::endl;
    std::cout << "Total lost packets due to overflow in Queue2: " << lostPackets2 << std::endl;

    return 0;
}

